# 特徴
* MDS: multi-dimensional scaling
* データの構造を考察する方法
* 個体間の親近性データを、2次元あるいは3次元空間に類似したものを近く、そうでないものを遠くに配置する方法
* データから距離 ( あるいは類似度 ) を求め、2-3次元空間上の各点 ( 個体 ) の座標値を求め、視覚的にその相対関係を考察する
* 計量多次元尺度法と非計量多次元尺度法に大別される

## 計量多次元尺度法
* 距離データを低次元に配置する方法

## 非計量多次元尺度法
* 順序尺度のデータの類似度あるいは距離に変換可能な親近性データを低次元に配置する方法

# 多次元尺度法の手順のステップ
1. 距離を求める
2. 座標値を求める
3. 2 - 3次元上で個体を配置する(散布図を作成する)
4. 信頼性について考察する

# 距離関数
## 距離
* 距離はしばしば非類似度 ( dissimilarity ) とも呼ばれている
	* 距離は値が小さいほど個体間の関連性が強いと判断する
* ミンコフスキー距離: ユークリッド距離、市外距離 ( マンハッタン距離 ) 

## 類似度
* 類似度は値が大きいほど個体間の関連性が強い
と判断するため
* ピアソン相関係数など

## R package
* {stats}
	* dist(): "euclidean", "maximum", "manhattan", "canberra", "binary" , "minkowski"
* {mvpart}
	* gdist(): "euclidean", "manhattan", "gower", "bray", "kulczynski", "maximum",  "maximum", "binary", "chord"
* {vegan}
	* vegdist(): manhattan", "euclidean", "canberra", "bray", "kulczynski", "jaccard", "gower", "morisita", "horn", "mountford"
* {ade4}
	* dist.binary(), dist.dudi()


# 計量多次元尺度法
* 比率尺度のデータにおける個体間の親近性を距離として計測し、距離データをユークリッド空間上で個体を配置することを前提としている

## cmdscale()
```{r }
cmdscale(d, # 距離構造のデータ
		k = 2, # 次元数で、デフォルトでは2に設定されている
		eig=FALES) # 固有値を返すか否か、デフォルトではFALES
		# TRUEにすると座標値は$pointsに記録される
```
* {stats}
* cmdscale()
	* Classical ( Metric ) Multidimensional Scaling
	* 古典的多次元尺度法
	* 主座標分析 ( Principal Coordinate Analysis ) 
* 古典的多次元尺度法に用いる距離がユークリッド距離である場合は、相関行列を用いた主成分分析と等価

# 非計量多次元尺度法
## 特徴
* 質的データの解析をも視野に入れ、計量多次元尺度法を発展させたもの
* 間隔尺度の親近性のデータを距離構造のデータに変換したとしても計量多次元尺度で用いた距離とは意味が異なる
* 人文社会学などで得られたデータには間隔尺度が多い場合にも有効
* 基本的には個体間の距離dijを配置すべくk次元における距離距離の推測値との差の2乗和が最小になるような座標値を求める
* Kruskalの方法が最も一般的
	* 2つの対象間の ( 非 ) 類似度関係を分析するための多次元尺度構成法である
* 類似度は少なくとも順位尺度であれば良い
	* 類似度と距離の関係は単調関係 ( 順序関係)を満たせばよい
	* 線形関係を満たす必要性はない
* 低次元での当てはまりが良く、視覚的理解がしやすい
* 様々な距離に適用可能
* 欠測値に対する許容性がある

## Kruskalの方法
* 対象間の関係を、類似度と対象間の距離とが単調関係を満たすように対象を点として多次元空間内に位置付けることで表現
* 対象iとjの非類似度と対象iとjの距離の大小関係ができるだけ満たすように多次元空間内の点の座標を決定
* 布置では対象間の類似度の大小の関係が、点間の距離によって視覚的に把握可能
	* 対象を多次元空間内に位置づけた図を布置と呼ぶ

* はじめに、ある次元におけるn個　(　分析対象の対象数　)　の点の仮の位置を決定
* 点間距離が類似度と単調減少関係になるように、多次元空間内での対象の点の座標を徐々に改善
	* 対象間の類似度と対象を表す点間の距離が必ずしも単調関係を満たさない場合もある
* 最適な位置関係となる各対象の座標を算出
	* 単調関係をどの程度満たしているのかを示す尺度である不適合度 ( ストレス ) を基準とする

## 適合度 ( ストレス )
* Kruscalが提唱
* 距離とデータの単調関係の当てはまりの程度示す尺度
	* この値が小さければ小さいほど、当てはまりが良いと判断する
* ストレスを最小とするように座標を定めることを提案

ストレス値|評価
:-:|:-:
0.2|悪い(poor)
0.1|まずまず(fair)
0.05|よい(good)
0.025|すばらしい(excellent)
0.00|完璧(perfect)

### ストレスSが最小となる座標の導出
* 制約のない最適化問題を解くための勾配法である最急降下法を利用
* ストレスSが最小となる方向に解 ( 座標値 ) を探索
* 次元数tのもとでストレスを最小化する布置を求めるとすると、
	* 仮のt次元布置 ( 初期布置 ) を求める
	* この布置のストレスが減少するように対象の位置を少しずつ動かして布置を反復的に改善
	* ストレスが一定以上減少しなくなるまで反復を続行

#### 局所極小布置
* ストレスがそれ以上改善できない布置
* ストレスが必ずしも最小であるとは限らない
* 初期の座標値をどのように与えるかに解が依存するため 
* 局所最適解が得られてしまう場合がある
	* 局所的な最小値であって、全体の最小値ではない値)

#### 布置と次元数
* 様々な初期値を用いて分析を行い、ストレスの最小値が得られている結果を解として採用する必要がある
* ストレスSは点間の距離によって定義されるため、あらかじめ布置の次元数を決めておく必要がある
* 布置の次元数がいくつであるかは通常は分析を行う前には不明
* 何種類かの次元数のもとで分析を行い、各次元数においてストレスを最小にする布置を求める
* 得られたストレスや布置を検討して何次元の布置を解にするかを決定
、

## isoMDS()
* {MASS}に含まれる
* 関数isoMDSは、ストレスを最小になるように座標を決める
```{r }
isoMDS(d, # 距離構造をもつデータマトリクス
	k = 2) # 次元数で、デフォルトでは2に設定されている
```

# 参考
* [Rと多次元尺度法](https://www1.doshisha.ac.jp/~mjin/R/27/27.html)
* [多次元尺度構成法](http://www.yokoyamalab.org/societies/bsjspringseminar13/bsjseminar13_A2_27AM.pdf)